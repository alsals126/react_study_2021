[{"C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\index.js":"1","C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\jsx\\create-react-element.js":"2","C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\jsx\\jsx-basic-1.js":"3","C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\component-basic\\component-test.js":"4","C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\component-basic\\props-basic-1.js":"5","C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\component-basic\\props-children.js":"6"},{"size":207,"mtime":1616379275908,"results":"7","hashOfConfig":"8"},{"size":1018,"mtime":1615774451143,"results":"9","hashOfConfig":"8"},{"size":1145,"mtime":1615778157005,"results":"10","hashOfConfig":"8"},{"size":1021,"mtime":1616131620206,"results":"11","hashOfConfig":"8"},{"size":3212,"mtime":1616378957800,"results":"12","hashOfConfig":"8"},{"size":889,"mtime":1616380360815,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"shxamq",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\index.js",[],"C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\jsx\\create-react-element.js",["29","30"],"C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\jsx\\jsx-basic-1.js",["31","32","33","34"],"import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nconst name = 'Josh Perez'\r\n// 변수 내용 삽입 가능\r\nconst element = <h1>Hello, {name}</h1>\r\n\r\nconst lst = [100, 200, 300] //배열\r\nconst person = { //객체\r\n    name: 'John',\r\n    age: 20\r\n}\r\nfunction double(value) { //함수\r\n    return value * 2\r\n}\r\n\r\nconst JSXwithExpressions = (\r\n    <h1>\r\n        {/*중괄호를 하고 주석달기*/}\r\n        {/* 밑에 처럼 변수, 배열 접근 가능 */}\r\n        {lst[0]}\r\n        &nbsp;{person.name}\r\n        &nbsp;{person.age}\r\n        &nbsp;{2 + 2}\r\n        &nbsp;{person.name.toUpperCase()}\r\n        &nbsp;{person.name.length}\r\n        &nbsp;{double(person.age)}\r\n    </h1>)\r\n\r\nconst age = 20\r\nconst conditionalElement = (\r\n    <>{age >= 20 ? <div>성인</div> : <div>미성년자</div>}</>\r\n)\r\n\r\n//원래는 background-color인데 -로 인식되기 때문에 카멜 표기법으로 쓴다.\r\nconst cssObj = {color:\"red\", backgroundColor : \"blue\"}\r\nconst h1 = <h1 style={cssObj}>Hello Style!</h1>\r\nconst h2 = <h1 style={{color:\"red\"}}>Hello Style</h1> //인라인\r\n\r\n\r\nReactDOM.render(h1, document.getElementById(\"root\"))\r\n","C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\component-basic\\component-test.js",[],"C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\component-basic\\props-basic-1.js",["35"],"import React, {Component, Fragment} from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nclass ComponentWithProps extends Component {\r\n    // 리액트할 때(컴포넌트 상속받을 때) 생성자 생성(+부모생성자 호출) 필수!\r\n    constructor(props) { //<ComponentWithProps value=\"Hello\" asdf=\"World\"/> 속성(value, asdf)들을 생성자를 통해 전달함\r\n        super(props) //부모생성자 호출\r\n\r\n        console.log(props)\r\n\r\n       // this.props.value = \"Modify\" //수정이 불가능하고, 하면 안된다. (읽기 전용이기 때문이다)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {/* 생성자를 통해 얻은 props를 this를 통해 접근한다.*/}\r\n                <p>{this.props.asdf.toString()}</p>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nclass ComponentWithMultipleProps extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        console.log(props)\r\n    }\r\n\r\n    render() {\r\n        // 객체 비구조 할당 사용 idiom\r\n        const { value1, value2, whatever } = this.props\r\n\r\n        /*\r\n        return (\r\n            <>\r\n                <p>{this.props.value1}</p>\r\n                <p>{this.props.value2}</p>\r\n                <p>{this.props.whatever}</p>\r\n            </>\r\n        )\r\n        */\r\n        return (\r\n            <>\r\n                <p>{value1} {value2} {whatever}</p>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nclass PersonProfile extends Component {\r\n    render() {\r\n        const { name, age, gender, profile } = this.props\r\n        // props 값은 수정 불가\r\n        // Cannot assign to read only property 'name' of object '#<Object>'\r\n        // this.props.name = 'Jane'\r\n\r\n        return (\r\n            <div\r\n                className='person'\r\n                style={this.props.highlight ? {color: 'red'} : null}>\r\n                <h1>Profile</h1>\r\n                <img src={profile} />\r\n                <p>name : {name}</p>\r\n                <p>age : {age}</p>\r\n                <p>gender : {gender}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst anotherPerson = {\r\n    name: 'Jane',\r\n    age: 28,\r\n    gender: 'female',\r\n    profile: 'https://randomuser.me/api/portraits/women/75.jpg'\r\n}\r\nconst {name, gender, ...rest} = anotherPerson\r\nconsole.log(rest)\r\n\r\n// <ComponentWithProps value=\"Hello\" asdf=\"World\"/> => 속성과 속성값 해주기\r\n//ReactDOM.render(<ComponentWithProps value=\"Hello\" asdf=\"World\"/>, document.getElementById(\"root\"))\r\n\r\n//ReactDOM.render(<ComponentWithMultipleProps value1=\"Hello\" value2=\"World\" whatever={1234} />, document.getElementById(\"root\"))\r\nReactDOM.render(\r\n    <div>\r\n        <PersonProfile\r\n            name='John'\r\n            age={35}\r\n            gender='male'\r\n            profile='https://randomuser.me/api/portraits/men/75.jpg'\r\n            highlight {/*style={this.props.highlight ? {color: 'red'} : null} 이걸 이용해서 글씨 색깔이 빨강색으로 보이게 한다*/}\r\n        />\r\n        <PersonProfile {...anotherPerson}/>\r\n        <PersonProfile name='Ken' gender='male' {...rest} age={32}/> {/*{...rest}를 age보다 앞에써서 값을 덮어쓰지 않도록 한다.*/}\r\n    </div>,\r\n    document.getElementById(\"root\"))",["36","37"],"C:\\Users\\Samsung\\Desktop\\3학년\\리액트\\react_study1\\src\\component-basic\\props-children.js",["38","39"],{"ruleId":"40","severity":1,"message":"41","line":23,"column":7,"nodeType":"42","messageId":"43","endLine":23,"endColumn":12},{"ruleId":"44","severity":1,"message":"45","line":25,"column":41,"nodeType":"46","messageId":"47","endLine":25,"endColumn":59},{"ruleId":"40","severity":1,"message":"48","line":6,"column":7,"nodeType":"42","messageId":"43","endLine":6,"endColumn":14},{"ruleId":"40","severity":1,"message":"49","line":17,"column":7,"nodeType":"42","messageId":"43","endLine":17,"endColumn":25},{"ruleId":"40","severity":1,"message":"50","line":31,"column":7,"nodeType":"42","messageId":"43","endLine":31,"endColumn":25},{"ruleId":"40","severity":1,"message":"51","line":38,"column":7,"nodeType":"42","messageId":"43","endLine":38,"endColumn":9},{"ruleId":null,"fatal":true,"severity":2,"message":"52","line":93,"column":108},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"40","severity":1,"message":"57","line":1,"column":28,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},{"ruleId":"40","severity":1,"message":"58","line":34,"column":7,"nodeType":"42","messageId":"43","endLine":34,"endColumn":28},"no-unused-vars","'title' is assigned a value but never used.","Identifier","unusedVar","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'element' is assigned a value but never used.","'JSXwithExpressions' is assigned a value but never used.","'conditionalElement' is assigned a value but never used.","'h2' is assigned a value but never used.","Parsing error: Unexpected token, expected \"...\"\n\n\u001b[0m \u001b[90m 91 |\u001b[39m             gender\u001b[33m=\u001b[39m\u001b[32m'male'\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 92 |\u001b[39m             profile\u001b[33m=\u001b[39m\u001b[32m'https://randomuser.me/api/portraits/men/75.jpg'\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 93 |\u001b[39m             highlight {\u001b[90m/*style={this.props.highlight ? {color: 'red'} : null} 이걸 이용해서 글씨 색깔이 빨강색으로 보이게 한다*/\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                                                                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 94 |\u001b[39m         \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 95 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mPersonProfile\u001b[39m {\u001b[33m...\u001b[39manotherPerson}\u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 96 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mPersonProfile\u001b[39m name\u001b[33m=\u001b[39m\u001b[32m'Ken'\u001b[39m gender\u001b[33m=\u001b[39m\u001b[32m'male'\u001b[39m {\u001b[33m...\u001b[39mrest} age\u001b[33m=\u001b[39m{\u001b[35m32\u001b[39m}\u001b[35m/> {/\u001b[39m\u001b[33m*\u001b[39m{\u001b[33m...\u001b[39mrest}를 age보다 앞에써서 값을 덮어쓰지 않도록 한다\u001b[33m.\u001b[39m\u001b[33m*\u001b[39m\u001b[33m/\u001b[39m}\u001b[0m","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"'Fragment' is defined but never used.","'ChildWithFunctionProp' is defined but never used.","no-global-assign","no-unsafe-negation"]