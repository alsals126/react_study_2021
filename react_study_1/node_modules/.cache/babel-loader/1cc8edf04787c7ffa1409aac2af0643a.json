{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uC624\\uC815\\uBBFC(2021\\uB144)\\\\3\\uD559\\uB144\\\\\\uB9AC\\uC561\\uD2B8\\\\react_study1\\\\src\\\\component-advanced\\\\ref-demo.js\";\nimport React, { Component, createRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass RefDemo extends Component {\n  constructor(props) {\n    super(props); // 주로 직접 접근이 필요한 DOM 노드를 저장하기 위한 용도로 Ref 사용\n\n    this.inputEl = /*#__PURE__*/createRef();\n    this.canvasEl = /*#__PURE__*/createRef(); // 그냥 일반적인 값을 저장하기 위해서도 사용 가능 (보통 state 객체를 통해 상태를 저장하므로, 딱히 권장되는 방법은 아님)\n\n    this.value = /*#__PURE__*/createRef(); // 값 자체에는 Ref 객체의 current 속성을 통해서 접근\n\n    this.value.current = 1;\n    this.state = {\n      trigger: true\n    };\n  }\n\n  render() {\n    console.log('render');\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: this.inputEl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.setState(state => ({\n            trigger: !state.trigger\n          }));\n        },\n        children: [\"Trigger re-render \", `(${this.state.trigger})`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // ref 값은 변경해도 re-render 하지 않음을 유의!\n          this.value.current++;\n          console.log(this.value.current);\n        },\n        children: [\"Update ref \", `(${this.value.current})`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // 값 자체에는 current를 이용하여 접근\n          // ref에 저장된 값은 DOM 노드\n          this.inputEl.current.focus();\n        },\n        children: \"Focus input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"200\",\n        height: \"200\",\n        ref: this.canvasEl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const c = this.canvasEl.current; // 리액트를 통해서 특정 요소만 가지고 있는 고유 속성 및 메소드에는 접근하지 못하므로 ref 값을 통해 직접 DOM 요소 접근\n\n          const ctx = c.getContext(\"2d\");\n          const grd = ctx.createLinearGradient(0, 0, 200, 0);\n          grd.addColorStop(0, this.state.trigger ? \"red\" : \"white\");\n          grd.addColorStop(1, this.state.trigger ? \"white\" : \"red\");\n          ctx.fillStyle = grd;\n          ctx.fillRect(0, 0, 200, 200);\n        },\n        children: \"Draw gradient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(RefDemo, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["D:/오정민(2021년)/3학년/리액트/react_study1/src/component-advanced/ref-demo.js"],"names":["React","Component","createRef","ReactDOM","RefDemo","constructor","props","inputEl","canvasEl","value","current","state","trigger","render","console","log","setState","focus","c","ctx","getContext","grd","createLinearGradient","addColorStop","fillStyle","fillRect","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nclass RefDemo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // 주로 직접 접근이 필요한 DOM 노드를 저장하기 위한 용도로 Ref 사용\r\n        this.inputEl = createRef()\r\n        this.canvasEl = createRef()\r\n        // 그냥 일반적인 값을 저장하기 위해서도 사용 가능 (보통 state 객체를 통해 상태를 저장하므로, 딱히 권장되는 방법은 아님)\r\n        this.value = createRef()\r\n        // 값 자체에는 Ref 객체의 current 속성을 통해서 접근\r\n        this.value.current = 1\r\n        this.state = { trigger: true }\r\n    }\r\nrender() {\r\n    console.log('render')\r\n    return (\r\n        <>\r\n            {/* ref 속성에 앞서 생성한 ref 객체를 전달하는 방식으로 DOM 요소를 저장*/}\r\n            <input type='text' ref={this.inputEl} />\r\n            <br />\r\n            <button onClick={() => {\r\n                this.setState((state) => ({ trigger: !state.trigger}) )\r\n            }}>Trigger re-render {`(${this.state.trigger})`}</button>\r\n            <br />\r\n            <button onClick={() => {\r\n                // ref 값은 변경해도 re-render 하지 않음을 유의!\r\n                this.value.current++\r\n                console.log(this.value.current)\r\n            }}>Update ref {`(${this.value.current})`}</button>\r\n            <br />\r\n            <button onClick={() => {\r\n                // 값 자체에는 current를 이용하여 접근\r\n                // ref에 저장된 값은 DOM 노드\r\n                this.inputEl.current.focus()\r\n            }}>Focus input</button>\r\n            <hr />\r\n            <canvas width=\"200\" height=\"200\" ref={this.canvasEl} />\r\n            <br />\r\n            <button onClick={() => {\r\n                const c = this.canvasEl.current\r\n                // 리액트를 통해서 특정 요소만 가지고 있는 고유 속성 및 메소드에는 접근하지 못하므로 ref 값을 통해 직접 DOM 요소 접근\r\n                const ctx = c.getContext(\"2d\")\r\n                const grd = ctx.createLinearGradient(0, 0, 200, 0)\r\n                grd.addColorStop(0, this.state.trigger ? \"red\" : \"white\")\r\n                grd.addColorStop(1, this.state.trigger ? \"white\" : \"red\")\r\n                ctx.fillStyle = grd\r\n                ctx.fillRect(0, 0, 200, 200)\r\n            }}>Draw gradient</button>\r\n        </>\r\n    )\r\n}\r\n}\r\nReactDOM.render(<RefDemo />, document.getElementById(\"root\"))"]},"metadata":{},"sourceType":"module"}