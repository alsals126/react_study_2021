{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uC624\\uC815\\uBBFC(2021\\uB144)\\\\3\\uD559\\uB144\\\\\\uB9AC\\uC561\\uD2B8\\\\react_study1\\\\src\\\\component-advanced\\\\context-api.js\";\nimport React, { Component, createContext } from 'react';\nimport ReactDOM from 'react-dom'; // 문자열을 저장하는 Context 생성 (기본값은 'global')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext('default');\n\nclass ChildComponent extends Component {\n  render() {\n    {\n      /* Consumer 컴포넌트로 전체 컴포넌트 내용을 감싸기 */\n    }\n    {\n      /* 내부에서 콜백 함수를 정의하여 값(valueFromContext)을 전달받음 */\n    }\n    return /*#__PURE__*/_jsxDEV(MyContext.Consumer, {\n      children: valueFromContext => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"id : \", this.props.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"value : \", valueFromContext]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst Nested = props => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: props.children\n}, void 0, false);\n\n_c = Nested;\n\nclass App extends Component {\n  render() {\n    let globalValue = 'global';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MyContext.Provider, {\n        value: globalValue,\n        children: [/*#__PURE__*/_jsxDEV(ChildComponent, {\n          id: \"child 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Nested, {\n          children: /*#__PURE__*/_jsxDEV(Nested, {\n            children: /*#__PURE__*/_jsxDEV(Nested, {\n              children: /*#__PURE__*/_jsxDEV(ChildComponent, {\n                id: \"child 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChildComponent, {\n        id: \"child 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 55,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"Nested\");","map":{"version":3,"sources":["D:/오정민(2021년)/3학년/리액트/react_study1/src/component-advanced/context-api.js"],"names":["React","Component","createContext","ReactDOM","MyContext","ChildComponent","render","valueFromContext","props","id","Nested","children","App","globalValue","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;;;AACA,MAAMC,SAAS,gBAAGF,aAAa,CAAC,SAAD,CAA/B;;AAEA,MAAMG,cAAN,SAA6BJ,SAA7B,CAAuC;AACnCK,EAAAA,MAAM,GAAG;AACL;AAAC;AAAqC;AACtC;AAAC;AAAiD;AAClD,wBACA,QAAC,SAAD,CAAW,QAAX;AAAA,gBACKC,gBAAgB,IAAI;AACjB,4BACI;AAAA,kCACI;AAAA,gCAAS,KAAKC,KAAL,CAAWC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,mCAAYF,gBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMH;AARL;AAAA;AAAA;AAAA;AAAA,YADA;AAYH;;AAhBkC;;AAmBvC,MAAMG,MAAM,GAAIF,KAAD,iBAAW;AAAA,YAAGA,KAAK,CAACG;AAAT,iBAA1B;;KAAMD,M;;AAEN,MAAME,GAAN,SAAkBX,SAAlB,CAA4B;AACxBK,EAAAA,MAAM,GAAG;AACL,QAAIO,WAAW,GAAG,QAAlB;AAEA,wBACI;AAAA,8BACI,QAAC,SAAD,CAAW,QAAX;AAAoB,QAAA,KAAK,EAAEA,WAA3B;AAAA,gCAEI,QAAC,cAAD;AAAgB,UAAA,EAAE,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,MAAD;AAAA,iCACI,QAAC,MAAD;AAAA,mCACI,QAAC,MAAD;AAAA,qCAEI,QAAC,cAAD;AAAgB,gBAAA,EAAE,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAgBI,QAAC,cAAD;AAAgB,QAAA,EAAE,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAoBH;;AAxBuB;;AA2B5BV,QAAQ,CAACG,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBQ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { Component, createContext } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n// 문자열을 저장하는 Context 생성 (기본값은 'global')\r\nconst MyContext = createContext('default');\r\n\r\nclass ChildComponent extends Component {\r\n    render() {\r\n        {/* Consumer 컴포넌트로 전체 컴포넌트 내용을 감싸기 */}\r\n        {/* 내부에서 콜백 함수를 정의하여 값(valueFromContext)을 전달받음 */}\r\n        return (\r\n        <MyContext.Consumer>\r\n            {valueFromContext => {\r\n                return (\r\n                    <div>\r\n                        <p>id : {this.props.id}</p>\r\n                        <p>value : {valueFromContext}</p>\r\n                    </div>\r\n                )\r\n            }}\r\n        </MyContext.Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nconst Nested = (props) => <>{props.children}</>\r\n\r\nclass App extends Component {\r\n    render() {\r\n        let globalValue = 'global'\r\n\r\n        return (\r\n            <div>\r\n                <MyContext.Provider value={globalValue}>\r\n                    {/* props 값을 전달하지 않아도 내부에서 Provider를 통해 전달한 값에 접근 가능 */}\r\n                    <ChildComponent id='child 1' />\r\n                    <Nested>\r\n                        <Nested>\r\n                            <Nested>\r\n                                {/* 비록 많은 중첩 컴포넌트의 내부에 포함되어 있다고 하더라도, (props를 통해 값을 전달받지 않아도) Context 값에 접근 가능 */}\r\n                                <ChildComponent id='child 2' />\r\n                            </Nested>\r\n                        </Nested>\r\n                    </Nested>\r\n                </MyContext.Provider>\r\n                {/*\r\n                    Provider 컴포넌트로 감싸지 않은 ChildComponent는 디폴트값('default')을 전달받게 됨\r\n                */}\r\n                <ChildComponent id='child 3' />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))"]},"metadata":{},"sourceType":"module"}