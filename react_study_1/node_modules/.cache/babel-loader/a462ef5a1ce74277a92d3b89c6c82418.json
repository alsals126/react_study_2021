{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uC624\\uC815\\uBBFC(2021\\uB144)\\\\3\\uD559\\uB144\\\\\\uB9AC\\uC561\\uD2B8\\\\react_study1\\\\src\\\\component-intermediate\\\\lifecycle-methods.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProp = () => {\n      this.setState(state => ({\n        prop1: 'prop' + (state.prop2 + 1),\n        prop2: state.prop2 + 1\n      }));\n    };\n\n    this.state = {\n      prop1: 'prop1',\n      prop2: 1,\n      mount: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), this.state.mount && /*#__PURE__*/_jsxDEV(LifecycleMethodsDemo, {\n        prop1: this.state.prop1,\n        prop2: this.state.prop2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.updateProp,\n        children: \"update prop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          mount: true\n        }),\n        children: \"mount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          mount: false\n        }),\n        children: \"unmount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nclass LifecycleMethodsDemo extends Component {\n  // 컴포넌트가 생성되는 시점에 단 한 번 호출\n  constructor(props) {\n    super(props);\n    console.log('constructor');\n    this.state = {\n      value: 0\n    };\n  } // 컴포넌트의 첫 번째 render 호출으로 인한 mount 작업 이후 단 한 번 호출\n\n\n  componentDidMount() {\n    console.log('componentDidMount');\n  } // props, state 변경시마다 render 함수 호출 이후 호출\n\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('componentDidUpdate', prevProps, prevState);\n  } // unmount 시점에 호출\n\n\n  componentWillUnmount() {\n    console.log('componentWillUnmount');\n  } // props, state 값 변경에 의해서 호출\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"state : \", this.state.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"props : prop1 : \", this.props.prop1, \" prop2 : \", this.props.prop2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState(state => {\n          return {\n            value: state.value + 1\n          };\n        }),\n        children: \"update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 69,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["D:/오정민(2021년)/3학년/리액트/react_study1/src/component-intermediate/lifecycle-methods.js"],"names":["React","Component","ReactDOM","Container","constructor","props","updateProp","setState","state","prop1","prop2","mount","render","LifecycleMethodsDemo","console","log","value","componentDidMount","componentDidUpdate","prevProps","prevState","componentWillUnmount","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\nclass Container extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = { prop1: 'prop1', prop2: 1, mount: true }\r\n    }\r\n\r\n    updateProp = () => {\r\n        this.setState((state) => ({\r\n            prop1: 'prop' + (state.prop2 + 1),\r\n            prop2: state.prop2 + 1\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <hr />\r\n            {this.state.mount && <LifecycleMethodsDemo prop1={this.state.prop1} prop2={this.state.prop2} />}\r\n            <hr />\r\n            <button onClick={this.updateProp}>update prop</button>\r\n            <button onClick={() => this.setState({ mount : true })}>mount</button>\r\n            <button onClick={() => this.setState({ mount : false })}>unmount</button>\r\n        </div>)\r\n    }\r\n}\r\n\r\nclass LifecycleMethodsDemo extends Component {\r\n    // 컴포넌트가 생성되는 시점에 단 한 번 호출\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        console.log('constructor')\r\n\r\n        this.state = { value: 0 }\r\n    }\r\n\r\n    // 컴포넌트의 첫 번째 render 호출으로 인한 mount 작업 이후 단 한 번 호출\r\n    componentDidMount() {\r\n        console.log('componentDidMount')\r\n    }\r\n\r\n    // props, state 변경시마다 render 함수 호출 이후 호출\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log('componentDidUpdate', prevProps, prevState)\r\n    }\r\n\r\n    // unmount 시점에 호출\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount')\r\n    }\r\n\r\n    // props, state 값 변경에 의해서 호출\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>state : {this.state.value}</p>\r\n                <p>props : prop1 : {this.props.prop1} prop2 : {this.props.prop2}</p>\r\n                <button onClick={() => this.setState((state) => {\r\n                    return { value: state.value + 1 }\r\n                })}>update</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<Container />, document.getElementById(\"root\"))"]},"metadata":{},"sourceType":"module"}