{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\3\\uD559\\uB144\\\\\\uB9AC\\uC561\\uD2B8\\\\react_study1\\\\src\\\\component-basic\\\\props-basic-1.js\";\nimport React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ComponentWithProps extends Component {\n  // 리액트할 때(컴포넌트 상속받을 때) 생성자 생성(+부모생성자 호출) 필수!\n  constructor(props) {\n    //<ComponentWithProps value=\"Hello\" asdf=\"World\"/> 속성(value, asdf)들을 생성자를 통해 전달함\n    super(props); //부모생성자 호출\n\n    console.log(props); // this.props.value = \"Modify\" //수정이 불가능하고, 하면 안된다. (읽기 전용이기 때문이다)\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.asdf.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nclass ComponentWithMultipleProps extends Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n  }\n\n  render() {\n    // 객체 비구조 할당 사용 idiom\n    const {\n      value1,\n      value2,\n      whatever\n    } = this.props;\n    /*\r\n    return (\r\n        <>\r\n            <p>{this.props.value1}</p>\r\n            <p>{this.props.value2}</p>\r\n            <p>{this.props.whatever}</p>\r\n        </>\r\n    )\r\n    */\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [value1, \" \", value2, \" \", whatever]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n} // <ComponentWithProps value=\"Hello\" asdf=\"World\"/> => 속성과 속성값 해주기\n//ReactDOM.render(<ComponentWithProps value=\"Hello\" asdf=\"World\"/>, document.getElementById(\"root\"))\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(ComponentWithMultipleProps, {\n  value1: \"Hello\",\n  value2: \"World\",\n  whatever: 1234\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 55,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/Users/Samsung/Desktop/3학년/리액트/react_study1/src/component-basic/props-basic-1.js"],"names":["React","Component","Fragment","ReactDOM","ComponentWithProps","constructor","props","console","log","render","asdf","toString","ComponentWithMultipleProps","value1","value2","whatever","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,WAArB;;;;AAEA,MAAMC,kBAAN,SAAiCH,SAAjC,CAA2C;AACvC;AACAI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAAE;AACjB,UAAMA,KAAN,EADe,CACF;;AAEbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAHe,CAKhB;AACF;;AAEDG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BAEI;AAAA,kBAAI,KAAKH,KAAL,CAAWI,IAAX,CAAgBC,QAAhB;AAAJ;AAAA;AAAA;AAAA;AAAA;AAFJ,qBADJ;AAMH;;AAjBsC;;AAoB3C,MAAMC,0BAAN,SAAyCX,SAAzC,CAAmD;AAC/CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAAEI,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA;AAAlB,QAA+B,KAAKT,KAA1C;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,wBACI;AAAA,6BACI;AAAA,mBAAIO,MAAJ,OAAaC,MAAb,OAAsBC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAKH;;AAzB8C,C,CA4BnD;AACA;;;AAEAZ,QAAQ,CAACM,MAAT,eAAgB,QAAC,0BAAD;AAA4B,EAAA,MAAM,EAAC,OAAnC;AAA2C,EAAA,MAAM,EAAC,OAAlD;AAA0D,EAAA,QAAQ,EAAE;AAApE;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA8FO,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA9F","sourcesContent":["import React, {Component, Fragment} from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nclass ComponentWithProps extends Component {\r\n    // 리액트할 때(컴포넌트 상속받을 때) 생성자 생성(+부모생성자 호출) 필수!\r\n    constructor(props) { //<ComponentWithProps value=\"Hello\" asdf=\"World\"/> 속성(value, asdf)들을 생성자를 통해 전달함\r\n        super(props) //부모생성자 호출\r\n\r\n        console.log(props)\r\n\r\n       // this.props.value = \"Modify\" //수정이 불가능하고, 하면 안된다. (읽기 전용이기 때문이다)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {/* 생성자를 통해 얻은 props를 this를 통해 접근한다.*/}\r\n                <p>{this.props.asdf.toString()}</p>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nclass ComponentWithMultipleProps extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        console.log(props)\r\n    }\r\n\r\n    render() {\r\n        // 객체 비구조 할당 사용 idiom\r\n        const { value1, value2, whatever } = this.props\r\n\r\n        /*\r\n        return (\r\n            <>\r\n                <p>{this.props.value1}</p>\r\n                <p>{this.props.value2}</p>\r\n                <p>{this.props.whatever}</p>\r\n            </>\r\n        )\r\n        */\r\n        return (\r\n            <>\r\n                <p>{value1} {value2} {whatever}</p>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n// <ComponentWithProps value=\"Hello\" asdf=\"World\"/> => 속성과 속성값 해주기\r\n//ReactDOM.render(<ComponentWithProps value=\"Hello\" asdf=\"World\"/>, document.getElementById(\"root\"))\r\n\r\nReactDOM.render(<ComponentWithMultipleProps value1=\"Hello\" value2=\"World\" whatever={1234} />, document.getElementById(\"root\"))"]},"metadata":{},"sourceType":"module"}