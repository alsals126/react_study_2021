{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uC624\\uC815\\uBBFC(2021\\uB144)\\\\3\\uD559\\uB144\\\\\\uB9AC\\uC561\\uD2B8\\\\react_study1\\\\src\\\\component-advanced\\\\context-api-theme-context.js\";\nimport React, { Component, createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  theme: 'light',\n  // 저장할 수 있는 값에 제한이 없으므로, Context에 함수도 저장 가능\n  // 여기서는 아무 작업도 하지 않는 함수를 디폴트값으로 전달\n  toggleTheme: () => {}\n}); // 이 컴포넌트는 theme값과 상태를 바꾸는 함수(toggleTheme)도 필요로 함\n\nclass ThemeUsingButton extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(ThemeContext.Consumer, {\n      children: ({\n        theme,\n        toggleTheme\n      }) => {\n        const buttonStyle = {\n          width: '100px',\n          height: '100px',\n          fontSize: '50px'\n        };\n        if (theme === 'light') buttonStyle['background'] = '#000';\n        if (theme === 'dark') buttonStyle['background'] = '#fff';\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleTheme,\n          style: buttonStyle,\n          children: theme === 'light' ? '🌙' : '☀️'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this);\n  }\n\n} // 이 컴포넌트는 오직 theme 값만 필요로 함\n\n\nclass ThemeUsingContainer extends Component {\n  render() {\n    const lightTheme = {\n      background: '#fff'\n    };\n    const darkTheme = {\n      background: '#000'\n    };\n    {\n      /* theme 값만 전달 받기 (자바스크립트에서는 함수에서 일부 파라미터값만 전달받아도 무방) */\n    }\n    return /*#__PURE__*/_jsxDEV(ThemeContext.Consumer, {\n      children: ({\n        theme\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: theme === 'light' ? lightTheme : darkTheme,\n          children: /*#__PURE__*/_jsxDEV(ThemeUsingButton, {\n            children: \"Toggle theme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass ThemeApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleTheme = () => {\n      this.setState(state => ({\n        theme: state.theme === 'light' ? 'dark' : 'light'\n      }));\n    };\n\n    this.state = {\n      theme: 'light'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n        value: {\n          theme: this.state.theme,\n          toggleTheme: this.toggleTheme\n        },\n        children: /*#__PURE__*/_jsxDEV(ThemeUsingContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(ThemeApp, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 84,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["D:/오정민(2021년)/3학년/리액트/react_study1/src/component-advanced/context-api-theme-context.js"],"names":["React","Component","createContext","ReactDOM","ThemeContext","theme","toggleTheme","ThemeUsingButton","render","buttonStyle","width","height","fontSize","ThemeUsingContainer","lightTheme","background","darkTheme","ThemeApp","constructor","props","setState","state","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,YAAY,gBAAGF,aAAa,CAAC;AAC/BG,EAAAA,KAAK,EAAE,OADwB;AAE/B;AACA;AACAC,EAAAA,WAAW,EAAE,MAAM,CAAE;AAJU,CAAD,CAAlC,C,CAOA;;AACA,MAAMC,gBAAN,SAA+BN,SAA/B,CAAyC;AACrCO,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,YAAD,CAAc,QAAd;AAAA,gBAEK,CAAC;AAAEH,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,KAA4B;AACzB,cAAMG,WAAW,GAAG;AAAEC,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,MAAM,EAAE,OAA1B;AAAmCC,UAAAA,QAAQ,EAAE;AAA7C,SAApB;AACA,YAAGP,KAAK,KAAK,OAAb,EAAsBI,WAAW,CAAC,YAAD,CAAX,GAA4B,MAA5B;AACtB,YAAGJ,KAAK,KAAK,MAAb,EAAqBI,WAAW,CAAC,YAAD,CAAX,GAA4B,MAA5B;AAErB,4BACI;AAAQ,UAAA,OAAO,EAAEH,WAAjB;AAA8B,UAAA,KAAK,EAAEG,WAArC;AAAA,oBACKJ,KAAK,KAAK,OAAV,GAAoB,IAApB,GAA2B;AADhC;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH;AAZL;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH;;AAlBoC,C,CAqBzC;;;AACA,MAAMQ,mBAAN,SAAkCZ,SAAlC,CAA4C;AACxCO,EAAAA,MAAM,GAAG;AACL,UAAMM,UAAU,GAAG;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAnB;AACA,UAAMC,SAAS,GAAG;AAAED,MAAAA,UAAU,EAAE;AAAd,KAAlB;AAEA;AAAC;AAAyD;AAC1D,wBACA,QAAC,YAAD,CAAc,QAAd;AAAA,gBACK,CAAC;AAAEV,QAAAA;AAAF,OAAD,KAAe;AACZ,4BACI;AAAK,UAAA,KAAK,EAAEA,KAAK,KAAK,OAAV,GAAoBS,UAApB,GAAiCE,SAA7C;AAAA,iCACI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH;AAPL;AAAA;AAAA;AAAA;AAAA,YADA;AAWH;;AAjBuC;;AAoB5C,MAAMC,QAAN,SAAuBhB,SAAvB,CAAiC;AAC7BiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQnBb,WARmB,GAQL,MAAM;AAChB,WAAKc,QAAL,CAAcC,KAAK,KAAK;AACpBhB,QAAAA,KAAK,EAAGgB,KAAK,CAAChB,KAAN,KAAgB,OAAhB,GAA0B,MAA1B,GAAmC;AADvB,OAAL,CAAnB;AAGH,KAZkB;;AAGf,SAAKgB,KAAL,GAAa;AACThB,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAQDG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BAEI,QAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAE;AAC1BH,UAAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWhB,KADQ;AAE1BC,UAAAA,WAAW,EAAE,KAAKA;AAFQ,SAA9B;AAAA,+BAII,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA3B4B;;AA8BjCH,QAAQ,CAACK,MAAT,eAAgB,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA8Bc,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA9B","sourcesContent":["import React, { Component, createContext } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nconst ThemeContext = createContext({\r\n    theme: 'light',\r\n    // 저장할 수 있는 값에 제한이 없으므로, Context에 함수도 저장 가능\r\n    // 여기서는 아무 작업도 하지 않는 함수를 디폴트값으로 전달\r\n    toggleTheme: () => {}\r\n});\r\n\r\n// 이 컴포넌트는 theme값과 상태를 바꾸는 함수(toggleTheme)도 필요로 함\r\nclass ThemeUsingButton extends Component {\r\n    render() {\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {/* theme 값, toggleTheme 함수 모두 전달 받기 */}\r\n                {({ theme, toggleTheme }) => {\r\n                    const buttonStyle = { width: '100px', height: '100px', fontSize: '50px' }\r\n                    if(theme === 'light') buttonStyle['background'] = '#000'\r\n                    if(theme === 'dark') buttonStyle['background'] = '#fff'\r\n\r\n                    return (\r\n                        <button onClick={toggleTheme} style={buttonStyle}>\r\n                            {theme === 'light' ? '🌙' : '☀️' }\r\n                        </button>\r\n                    )\r\n                }}\r\n            </ThemeContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\n// 이 컴포넌트는 오직 theme 값만 필요로 함\r\nclass ThemeUsingContainer extends Component {\r\n    render() {\r\n        const lightTheme = { background: '#fff' }\r\n        const darkTheme = { background: '#000' }\r\n\r\n        {/* theme 값만 전달 받기 (자바스크립트에서는 함수에서 일부 파라미터값만 전달받아도 무방) */}\r\n        return (\r\n        <ThemeContext.Consumer>\r\n            {({ theme }) => {\r\n                return (\r\n                    <div style={theme === 'light' ? lightTheme : darkTheme}>\r\n                        <ThemeUsingButton>Toggle theme</ThemeUsingButton>\r\n                    </div>\r\n                )\r\n            }}\r\n        </ThemeContext.Consumer>\r\n    );\r\n    }\r\n}\r\n\r\nclass ThemeApp extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            theme: 'light'\r\n        }\r\n    }\r\n\r\n    toggleTheme = () => {\r\n        this.setState(state => ({\r\n            theme : state.theme === 'light' ? 'dark' : 'light'\r\n        }));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* 컴포넌트 내부의 theme 상태값과 토글 메소드를 Consumer로부터 전달받을 수 있도록 Provider 컴포넌트에 value 값을 설정 */}\r\n                <ThemeContext.Provider value={{\r\n                    theme: this.state.theme,\r\n                    toggleTheme: this.toggleTheme\r\n                }}>\r\n                    <ThemeUsingContainer />\r\n                </ThemeContext.Provider>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<ThemeApp />, document.getElementById(\"root\"))"]},"metadata":{},"sourceType":"module"}