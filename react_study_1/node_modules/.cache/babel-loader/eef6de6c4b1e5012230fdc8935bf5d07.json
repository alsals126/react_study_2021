{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uC624\\uC815\\uBBFC(2021\\uB144)\\\\3\\uD559\\uB144\\\\\\uB9AC\\uC561\\uD2B8\\\\react_study1\\\\src\\\\component-intermediate\\\\lifecycle-method-should-component-update.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 1\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState(s => ({\n          count: s.count + 1\n        })),\n        children: \"update count\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ShouldComponentUpdateDemo, {\n        count: this.state.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nclass ShouldComponentUpdateDemo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"a\"\n    };\n  } // props로 전달된 count 값이 짝수이거나 내부 상태값 중 text의 길이가 3의 배수가 될 경우 렌더링할 필요가 없다고 가정\n\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    console.log(nextProps, nextState, nextContext);\n\n    if (nextProps.count % 2 === 0) {\n      console.log(\"count 값이 짝수이므로 렌더링하지 않음\");\n      return false;\n    } else if (nextState.text.length % 3 === 0) {\n      console.log(\"text 길이가 3의 배수이므로 렌더링하지 않음\");\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    console.log(\"render\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"count : \", this.props.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"text : \", this.state.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState(s => ({\n          text: s.text + \"a\"\n        })),\n        children: \"update text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["D:/오정민(2021년)/3학년/리액트/react_study1/src/component-intermediate/lifecycle-method-should-component-update.js"],"names":["React","Component","ReactDOM","Container","constructor","props","state","count","render","setState","s","ShouldComponentUpdateDemo","text","shouldComponentUpdate","nextProps","nextState","nextContext","console","log","length","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;;;AACA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAC9BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBAAQ;AAAA,8BACJ;AAAQ,QAAA,OAAO,EAAG,MAAM,KAAKC,QAAL,CAAcC,CAAC,KAAK;AAAEH,UAAAA,KAAK,EAAEG,CAAC,CAACH,KAAF,GAC7C;AADoC,SAAL,CAAf,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADI,eAGJ,QAAC,yBAAD;AAA2B,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC;AAA7C;AAAA;AAAA;AAAA;AAAA,cAHI;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAKH;;AAX6B;;AAalC,MAAMI,yBAAN,SAAwCV,SAAxC,CAAkD;AAC9CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAAb;AACH,GAJ6C,CAKlD;;;AACIC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,WAAvB,EAAoC;AACrDC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ,EAAuBC,SAAvB,EAAkCC,WAAlC;;AACA,QAAIF,SAAS,CAACP,KAAV,GAAkB,CAAnB,KAA0B,CAA7B,EAAgC;AAC5BU,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,aAAO,KAAP;AACH,KAHD,MAGO,IAAIH,SAAS,CAACH,IAAV,CAAeO,MAAf,GAAwB,CAAzB,KAAgC,CAAnC,EAAsC;AACzCF,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AACDV,EAAAA,MAAM,GAAG;AACLS,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,wBAAQ;AAAA,8BACJ;AAAA,+BAAY,KAAKb,KAAL,CAAWE,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cADI,eAEJ;AAAA,8BAAW,KAAKD,KAAL,CAAWM,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFI,eAGJ;AAAQ,QAAA,OAAO,EAAG,MAAM,KAAKH,QAAL,CAAcC,CAAC,KAAK;AAAEE,UAAAA,IAAI,EAAGF,CAAC,CAACE,IAAF,GAC7C;AADoC,SAAL,CAAf,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHI;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAMH;;AAzB6C;;AA2BlDV,QAAQ,CAACM,MAAT,eAAgB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA+BY,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA/B","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nclass Container extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { count: 1 }\r\n    }\r\n    render() {\r\n        return (<div>\r\n            <button onClick={ () => this.setState(s => ({ count: s.count +\r\n                    1 })) }>update count</button>\r\n            <ShouldComponentUpdateDemo count={this.state.count} />\r\n        </div>)\r\n    }\r\n}\r\nclass ShouldComponentUpdateDemo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { text: \"a\" }\r\n    }\r\n// props로 전달된 count 값이 짝수이거나 내부 상태값 중 text의 길이가 3의 배수가 될 경우 렌더링할 필요가 없다고 가정\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        console.log(nextProps, nextState, nextContext)\r\n        if((nextProps.count % 2) === 0) {\r\n            console.log(\"count 값이 짝수이므로 렌더링하지 않음\")\r\n            return false\r\n        } else if((nextState.text.length % 3) === 0) {\r\n            console.log(\"text 길이가 3의 배수이므로 렌더링하지 않음\")\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    render() {\r\n        console.log(\"render\")\r\n        return (<div>\r\n            <p>count : {this.props.count}</p>\r\n            <p>text : {this.state.text}</p>\r\n            <button onClick={ () => this.setState(s => ({ text : s.text +\r\n                    \"a\" })) }>update text</button>\r\n        </div>)\r\n    }\r\n}\r\nReactDOM.render(<Container />, document.getElementById(\"root\"))"]},"metadata":{},"sourceType":"module"}